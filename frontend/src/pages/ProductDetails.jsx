import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import publicAPI from "../api/publicAPI";
import '../styles/productdetails.css';

function ProductDetails() {
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedSizes, setSelectedSizes] = useState([]); 
  const { id } = useParams();

  // Static policies information
  const staticPolicies = [
    {
      icon: "üéí",
      title: "∆Øu ƒë√£i t·∫∑ng k√®m",
      description: "T·∫∑ng k√®m v·ªõ d·ªát kim v√† balo ch·ªëng th·∫•m ƒë·ª±ng gi√†y cho m·ªói ƒë∆°n h√†ng Gi√†y ƒë√° b√≥ng."
    },
    {
      icon: "üîÑ",
      title: "ƒê·ªïi h√†ng d·ªÖ d√†ng",
      description: "H·ªó tr·ª£ kh√°ch h√†ng ƒë·ªïi size ho·∫∑c m·∫´u trong v√≤ng 7 ng√†y (s·∫£n ph·∫©m ch∆∞a qua s·ª≠ d·ª•ng)."
    },
    {
      icon: "üöö",
      title: "Ch√≠nh s√°ch giao h√†ng",
      description: "COD & Freeship to√†n qu·ªëc khi kh√°ch h√†ng thanh to√°n chuy·ªÉn kho·∫£n tr∆∞·ªõc t·ª´ 100k. Kh√¥ng √°p d·ª•ng cho h√†ng ph·ª• ki·ªán."
    },
    {
      icon: "üí≥",
      title: "Thanh to√°n ti·ªán l·ª£i",
      description: "Ch·∫•p nh·∫≠n c√°c lo·∫°i h√¨nh thanh to√°n b·∫±ng th·∫ª, ti·ªÅn m·∫∑t, chuy·ªÉn kho·∫£n."
    }
  ];

  // Fetch product data by ID
  useEffect(() => {
    publicAPI.get(`/api/products/${id}/`, {
      withCredentials: true,
      headers: {
        "Content-Type": "application/json",
      }
    })
      .then(res => {
        console.log(res.data);
        setProduct(res.data);
        setLoading(false);
      })
      .catch(err => {
        setError(err.message);
        setLoading(false);
      });
  }, [id]);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  const formattedPrice = new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(product.price);


  const handleSizeChange = (size) => {
    setSelectedSizes(prevSizes =>
      prevSizes.includes(size) ? prevSizes.filter(s => s !== size) : [...prevSizes, size]
    );
  };

  return (
    <div className="container my-5">
      <div className="row">
        {/* Product Images */}
        <div className="col-md-6">
          <div className="product-images">
            <img id="main-image" src={product.image} className="img-fluid" alt={product.name} />
          </div>
        </div>

        {/* Product Details */}
        <div className="col-md-6">
          <h2 className="product-title">{product.name}</h2>
          <p className="product-type">Lo·∫°i: {product.type}</p>
          <p className="product-price">
            <span className="text-danger fs-4 fw-bold">{formattedPrice}</span>
          </p>

 
          {/* Size Options */}
          <h5>K√≠ch th∆∞·ªõc</h5>
          <div className="d-flex flex-wrap mb-3 mt-2 me-3">
            {product.categories === "Gi√†y B√≥ng ƒê√°" ? (
              product.size_choices && product.size_choices.length > 0 ? (
                product.size_choices.map((size, index) => (
                  <div key={index} className="form-check">
                    <input
                      className="form-check-input"
                      type="checkbox"
                      id={`size-${index}`}
                      value={size}
                      onChange={() => handleSizeChange(size)}
                      checked={selectedSizes.includes(size)}
                    />
                    <label className="form-check-label me-3" htmlFor={`size-${index}`}>
                      {size}
                    </label>
                  </div>
                ))
              ) : (
                <p>No sizes available</p>
              )
            ) : (
              product.clothes_size_choices && product.clothes_size_choices.length > 0 ? (
                product.clothes_size_choices.map((size, index) => (
                  <div key={index} className="form-check">
                    <input
                      className="form-check-input"
                      type="checkbox"
                      id={`clothes-size-${index}`}
                      value={size}
                      onChange={() => handleSizeChange(size)}
                      checked={selectedSizes.includes(size)}
                    />
                    <label className="form-check-label me-3" htmlFor={`clothes-size-${index}`}>
                      {size}
                    </label>
                  </div>
                ))
              ) : (
                <p>No sizes available</p>
              )
            )}
          </div>


          {/* Quantity and Add to Cart */}
          <div className="d-flex align-items-center mb-4">
            <label htmlFor="quantity" className="me-3">S·ªë l∆∞·ª£ng:</label>
            <input type="number" id="quantity" className="form-control me-3" defaultValue="1" min="1" style={{ width: "80px" }} />
            <button className="btn btn-danger">Th√™m v√†o gi·ªè</button>
          </div>

          {/* Static Policies Section */}
          <div className="product-policies mt-4">
            <h5>∆Øu ƒë√£i v√† Ch√≠nh s√°ch</h5>
            <ul className="list-unstyled">
              {staticPolicies.map((policy, index) => (
                <li key={index} className="d-flex align-items-start mb-3">
                  <span className="me-2" style={{ fontSize: "1.5rem" }}>{policy.icon}</span>
                  <div>
                    <strong>{policy.title}</strong>
                    <p className="mb-0">{policy.description}</p>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ProductDetails;
